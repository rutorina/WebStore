/**
 * Professional BPMN 2.0 Diagram Generator
 * –°—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω—É BPMN –¥—ñ–∞–≥—Ä–∞–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ OMG BPMN 2.0
 * Professional-grade BPMN with all proper markings and flow types
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class ProfessionalBPMNGenerator {
    constructor() {
        this.cellCounter = 0;
    }

    generateId() {
        return `bpmn_${++this.cellCounter}`;
    }

    escapeXmlAttribute(text) {
        if (!text) return '';
        return text
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/\n/g, '&#10;')
            .replace(/\r/g, '&#13;')
            .replace(/\t/g, '&#9;');
    }

    createDetailedBPMN() {
        let content = '';

        // ===== POOLS (–£–ß–ê–°–ù–ò–ö–ò –ü–†–û–¶–ï–°–£) =====
        const pools = [
            { 
                id: this.generateId(), 
                x: 50, y: 50, width: 1800, height: 220, 
                text: 'üõí –ö–ª—ñ—î–Ω—Ç (Customer)', 
                color: '#e1d5e7',
                strokeColor: '#9673a6'
            },
            { 
                id: this.generateId(), 
                x: 50, y: 290, width: 1800, height: 280, 
                text: 'üåê –í–µ–±-—Å–∏—Å—Ç–µ–º–∞ –¢–µ—Ö–Ω–æ–°–≤—ñ—Ç (E-commerce Platform)', 
                color: '#dae8fc',
                strokeColor: '#6c8ebf'
            },
            { 
                id: this.generateId(), 
                x: 50, y: 590, width: 1800, height: 160, 
                text: 'üí≥ –ü–ª–∞—Ç—ñ–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ (Payment Gateway)', 
                color: '#d5e8d4',
                strokeColor: '#82b366'
            },
            { 
                id: this.generateId(), 
                x: 50, y: 770, width: 1800, height: 160, 
                text: 'üì¶ –°–∫–ª–∞–¥ —Ç–∞ –ª–æ–≥—ñ—Å—Ç–∏–∫–∞ (Warehouse & Logistics)', 
                color: '#fff2cc',
                strokeColor: '#d6b656'
            },
            { 
                id: this.generateId(), 
                x: 50, y: 950, width: 1800, height: 160, 
                text: 'üöö –°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (Shipping Service)', 
                color: '#f8cecc',
                strokeColor: '#b85450'
            }
        ];

        pools.forEach(pool => {
            content += `        <mxCell id="${pool.id}" value="${this.escapeXmlAttribute(pool.text)}" style="swimlane;html=1;childLayout=stackLayout;resizeParent=1;resizeParentMax=0;horizontal=0;fillColor=${pool.color};strokeColor=${pool.strokeColor};fontSize=14;fontStyle=1;strokeWidth=2;" vertex="1" parent="1">
          <mxGeometry x="${pool.x}" y="${pool.y}" width="${pool.width}" height="${pool.height}" as="geometry"/>
        </mxCell>
`;
        });

        // ===== START EVENT =====
        const startEvent = { id: this.generateId(), x: 120, y: 130 };
        content += `        <mxCell id="${startEvent.id}" value="üõçÔ∏è\\n–ü–æ—Ç—Ä–µ–±–∞\\n–≤ —Ç–æ–≤–∞—Ä—ñ" style="ellipse;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;fontSize=11;strokeWidth=2;" vertex="1" parent="${pools[0].id}">
          <mxGeometry x="70" y="70" width="80" height="80" as="geometry"/>
        </mxCell>
`;

        // ===== CUSTOMER ACTIVITIES =====
        const customerActivities = [
            { id: this.generateId(), x: 240, y: 120, text: 'üîç\\n–ü–æ—à—É–∫\\n—Ç–æ–≤–∞—Ä—ñ–≤', icon: 'üîç' },
            { id: this.generateId(), x: 360, y: 120, text: 'üëÅÔ∏è\\n–ü–µ—Ä–µ–≥–ª—è–¥\\n–¥–µ—Ç–∞–ª–µ–π', icon: 'üëÅÔ∏è' },
            { id: this.generateId(), x: 480, y: 120, text: 'üõí\\n–î–æ–¥–∞–≤–∞–Ω–Ω—è\\n–≤ –∫–æ—à–∏–∫', icon: 'üõí' },
            { id: this.generateId(), x: 720, y: 120, text: 'üìù\\n–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è\\n—Ñ–æ—Ä–º–∏', icon: 'üìù' },
            { id: this.generateId(), x: 960, y: 120, text: 'üí≥\\n–í–≤–µ–¥–µ–Ω–Ω—è\\n–ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –¥–∞–Ω–∏—Ö', icon: 'üí≥' },
            { id: this.generateId(), x: 1560, y: 120, text: 'üì¶\\n–û—Ç—Ä–∏–º–∞–Ω–Ω—è\\n—Ç–æ–≤–∞—Ä—É', icon: 'üì¶' }
        ];

        customerActivities.forEach(activity => {
            content += `        <mxCell id="${activity.id}" value="${this.escapeXmlAttribute(activity.text)}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;fontSize=11;strokeWidth=2;" vertex="1" parent="${pools[0].id}">
          <mxGeometry x="${activity.x - pools[0].x}" y="70" width="100" height="80" as="geometry"/>
        </mxCell>
`;
        });

        // ===== GATEWAYS (DECISION POINTS) =====
        const gateways = [
            { 
                id: this.generateId(), 
                x: 600, y: 130, 
                text: '‚ùì\\n–¢–æ–≤–∞—Ä\\n–¥–æ—Å—Ç—É–ø–Ω–∏–π?', 
                pool: 0,
                type: 'exclusive'
            },
            { 
                id: this.generateId(), 
                x: 840, y: 130, 
                text: '‚úÖ\\n–î–∞–Ω—ñ\\n–∫–æ—Ä–µ–∫—Ç–Ω—ñ?', 
                pool: 0,
                type: 'exclusive'
            }
        ];

        gateways.forEach(gateway => {
            const gatewayStyle = gateway.type === 'exclusive' ? 
                'rhombus;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;fontSize=10;strokeWidth=2;' :
                'rhombus;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;fontSize=10;strokeWidth=2;';
            
            content += `        <mxCell id="${gateway.id}" value="${this.escapeXmlAttribute(gateway.text)}" style="${gatewayStyle}" vertex="1" parent="${pools[gateway.pool].id}">
          <mxGeometry x="${gateway.x - pools[gateway.pool].x}" y="60" width="100" height="100" as="geometry"/>
        </mxCell>
`;
        });

        // ===== SYSTEM ACTIVITIES (SERVICE TASKS) =====
        const systemActivities = [
            { id: this.generateId(), x: 240, y: 380, text: 'üîç\\n–û–±—Ä–æ–±–∫–∞\\n–ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É', type: 'service' },
            { id: this.generateId(), x: 360, y: 380, text: 'üìä\\n–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è\\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É', type: 'service' },
            { id: this.generateId(), x: 480, y: 380, text: 'üõí\\n–û–Ω–æ–≤–ª–µ–Ω–Ω—è\\n—Å–µ—Å—ñ–π–Ω–æ–≥–æ –∫–æ—à–∏–∫–∞', type: 'service' },
            { id: this.generateId(), x: 600, y: 460, text: 'üì¶\\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞\\n–Ω–∞–ª—è–Ω–æ—Å—Ç—ñ –Ω–∞ —Å–∫–ª–∞–¥—ñ', type: 'service' },
            { id: this.generateId(), x: 720, y: 380, text: 'üßÆ\\n–í–∞–ª—ñ–¥–∞—Ü—ñ—è\\n–¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', type: 'service' },
            { id: this.generateId(), x: 840, y: 460, text: 'üí∞\\n–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫\\n–∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ', type: 'service' },
            { id: this.generateId(), x: 1080, y: 380, text: '‚úÖ\\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\\n—É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏', type: 'service' },
            { id: this.generateId(), x: 1200, y: 380, text: 'üìã\\n–°—Ç–≤–æ—Ä–µ–Ω–Ω—è\\n–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ë–î', type: 'service' },
            { id: this.generateId(), x: 1320, y: 380, text: 'üìß\\n–í—ñ–¥–ø—Ä–∞–≤–∫–∞\\n–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', type: 'service' },
            { id: this.generateId(), x: 1440, y: 380, text: 'üöÄ\\n–Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è\\n–ø—Ä–æ—Ü–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏', type: 'service' }
        ];

        systemActivities.forEach(activity => {
            const activityColor = activity.type === 'service' ? '#dae8fc' : '#fff2cc';
            const strokeColor = activity.type === 'service' ? '#6c8ebf' : '#d6b656';
            
            content += `        <mxCell id="${activity.id}" value="${this.escapeXmlAttribute(activity.text)}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=${activityColor};strokeColor=${strokeColor};fontSize=10;strokeWidth=2;" vertex="1" parent="${pools[1].id}">
          <mxGeometry x="${activity.x - pools[1].x}" y="${activity.y - pools[1].y}" width="100" height="80" as="geometry"/>
        </mxCell>
`;
        });

        // ===== PAYMENT SYSTEM ACTIVITIES =====
        const paymentActivities = [
            { id: this.generateId(), x: 960, y: 650, text: 'üîê\\n–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è\\n–ø–ª–∞—Ç—ñ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏' },
            { id: this.generateId(), x: 1080, y: 650, text: 'üí∏\\n–°–ø–∏—Å–∞–Ω–Ω—è\\n–∫–æ—à—Ç—ñ–≤ –∑ —Ä–∞—Ö—É–Ω–∫—É' },
            { id: this.generateId(), x: 1200, y: 650, text: 'üßæ\\n–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è\\n—á–µ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó' }
        ];

        paymentActivities.forEach(activity => {
            content += `        <mxCell id="${activity.id}" value="${this.escapeXmlAttribute(activity.text)}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;fontSize=10;strokeWidth=2;" vertex="1" parent="${pools[2].id}">
          <mxGeometry x="${activity.x - pools[2].x}" y="${activity.y - pools[2].y}" width="100" height="80" as="geometry"/>
        </mxCell>
`;
        });

        // ===== WAREHOUSE ACTIVITIES =====
        const warehouseActivities = [
            { id: this.generateId(), x: 600, y: 830, text: 'üìã\\n–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞\\n–Ω–∞–ª—è–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É' },
            { id: this.generateId(), x: 1320, y: 830, text: 'üì¶\\n–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞\\n—Ç–æ–≤–∞—Ä—É –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏' },
            { id: this.generateId(), x: 1440, y: 830, text: 'üè∑Ô∏è\\n–ú–∞—Ä–∫—É–≤–∞–Ω–Ω—è\\n–ø–æ—Å–∏–ª–∫–∏' }
        ];

        warehouseActivities.forEach(activity => {
            content += `        <mxCell id="${activity.id}" value="${this.escapeXmlAttribute(activity.text)}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;fontSize=10;strokeWidth=2;" vertex="1" parent="${pools[3].id}">
          <mxGeometry x="${activity.x - pools[3].x}" y="${activity.y - pools[3].y}" width="100" height="80" as="geometry"/>
        </mxCell>
`;
        });

        // ===== SHIPPING ACTIVITIES =====
        const shippingActivities = [
            { id: this.generateId(), x: 1440, y: 1010, text: 'üó∫Ô∏è\\n–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è\\n–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É' },
            { id: this.generateId(), x: 1560, y: 1010, text: 'üöö\\n–î–æ—Å—Ç–∞–≤–∫–∞\\n—Ç–æ–≤–∞—Ä—É –∫–ª—ñ—î–Ω—Ç—É' }
        ];

        shippingActivities.forEach(activity => {
            content += `        <mxCell id="${activity.id}" value="${this.escapeXmlAttribute(activity.text)}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;fontSize=10;strokeWidth=2;" vertex="1" parent="${pools[4].id}">
          <mxGeometry x="${activity.x - pools[4].x}" y="${activity.y - pools[4].y}" width="100" height="80" as="geometry"/>
        </mxCell>
`;
        });

        // ===== END EVENTS =====
        const endEvents = [
            { id: this.generateId(), x: 1680, y: 130, text: '‚úÖ\\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è\\n–≤–∏–∫–æ–Ω–∞–Ω–æ', pool: 0 },
            { id: this.generateId(), x: 780, y: 130, text: '‚ùå\\n–ü–æ–º–∏–ª–∫–∞\\n–¥–∞–Ω–∏—Ö', pool: 0 }
        ];

        endEvents.forEach(event => {
            const eventColor = event.text.includes('‚úÖ') ? '#d5e8d4' : '#f8cecc';
            const strokeColor = event.text.includes('‚úÖ') ? '#82b366' : '#b85450';
            const strokeWidth = event.text.includes('‚úÖ') ? '4' : '3';
            
            content += `        <mxCell id="${event.id}" value="${this.escapeXmlAttribute(event.text)}" style="ellipse;whiteSpace=wrap;html=1;fillColor=${eventColor};strokeColor=${strokeColor};fontSize=11;strokeWidth=${strokeWidth};" vertex="1" parent="${pools[event.pool].id}">
          <mxGeometry x="${event.x - pools[event.pool].x}" y="70" width="80" height="80" as="geometry"/>
        </mxCell>
`;
        });

        // ===== INTERMEDIATE EVENTS =====
        const intermediateEvents = [
            { id: this.generateId(), x: 1160, y: 140, text: '‚è∞\\n–û—á—ñ–∫—É–≤–∞–Ω–Ω—è\\n–æ–ø–ª–∞—Ç–∏', pool: 0 },
            { id: this.generateId(), x: 1360, y: 140, text: 'üìß\\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\\n–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', pool: 0 }
        ];

        intermediateEvents.forEach(event => {
            content += `        <mxCell id="${event.id}" value="${this.escapeXmlAttribute(event.text)}" style="ellipse;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;fontSize=10;strokeWidth=2;" vertex="1" parent="${pools[event.pool].id}">
          <mxGeometry x="${event.x - pools[event.pool].x}" y="70" width="80" height="80" as="geometry"/>
        </mxCell>
`;
        });

        // ===== FLOWS (–†–Ü–ó–ù–Ü –¢–ò–ü–ò –°–¢–†–Ü–õ–û–ö) =====
        const flows = [
            // SEQUENCE FLOWS (–ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –ø–æ—Ç–æ–∫–∏) - —Å—É—Ü—ñ–ª—å–Ω—ñ —á–æ—Ä–Ω—ñ —Å—Ç—Ä—ñ–ª–∫–∏
            { from: startEvent.id, to: customerActivities[0].id, type: 'sequence', label: '' },
            { from: customerActivities[0].id, to: customerActivities[1].id, type: 'sequence', label: '' },
            { from: customerActivities[1].id, to: customerActivities[2].id, type: 'sequence', label: '' },
            { from: customerActivities[2].id, to: gateways[0].id, type: 'sequence', label: '' },
            { from: gateways[0].id, to: customerActivities[3].id, type: 'sequence', label: '‚úÖ –¢–∞–∫' },
            { from: gateways[0].id, to: endEvents[1].id, type: 'sequence', label: '‚ùå –ù—ñ' },
            { from: customerActivities[3].id, to: gateways[1].id, type: 'sequence', label: '' },
            { from: gateways[1].id, to: customerActivities[4].id, type: 'sequence', label: '‚úÖ –¢–∞–∫' },
            { from: gateways[1].id, to: customerActivities[3].id, type: 'sequence', label: '‚ùå –ù—ñ (–ø–æ–≤—Ç–æ—Ä–∏—Ç–∏)' },
            { from: customerActivities[4].id, to: intermediateEvents[0].id, type: 'sequence', label: '' },
            { from: intermediateEvents[0].id, to: intermediateEvents[1].id, type: 'sequence', label: '' },
            { from: intermediateEvents[1].id, to: customerActivities[5].id, type: 'sequence', label: '' },
            { from: customerActivities[5].id, to: endEvents[0].id, type: 'sequence', label: '' },

            // MESSAGE FLOWS (–ü–æ—Ç–æ–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å) - –ø—É–Ω–∫—Ç–∏—Ä–Ω—ñ —Å–∏–Ω—ñ —Å—Ç—Ä—ñ–ª–∫–∏ –º—ñ–∂ pools
            { from: customerActivities[0].id, to: systemActivities[0].id, type: 'message', label: 'üîç –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç' },
            { from: systemActivities[1].id, to: customerActivities[0].id, type: 'message', label: 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É' },
            { from: customerActivities[1].id, to: systemActivities[1].id, type: 'message', label: 'üëÅÔ∏è –ó–∞–ø–∏—Ç –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É' },
            { from: customerActivities[2].id, to: systemActivities[2].id, type: 'message', label: 'üõí –î–∞–Ω—ñ –∫–æ—à–∏–∫–∞' },
            { from: customerActivities[3].id, to: systemActivities[4].id, type: 'message', label: 'üìù –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' },
            { from: systemActivities[4].id, to: customerActivities[3].id, type: 'message', label: '‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó' },
            { from: customerActivities[4].id, to: paymentActivities[0].id, type: 'message', label: 'üí≥ –ü–ª–∞—Ç—ñ–∂–Ω—ñ –¥–∞–Ω—ñ' },
            { from: paymentActivities[2].id, to: systemActivities[6].id, type: 'message', label: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏' },
            { from: systemActivities[8].id, to: customerActivities[4].id, type: 'message', label: 'üìß Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è' },

            // DATA FLOWS (–ü–æ—Ç–æ–∫–∏ –¥–∞–Ω–∏—Ö) - —Ç–æ—á–∫–æ–≤—ñ –∂–æ–≤—Ç—ñ —Å—Ç—Ä—ñ–ª–∫–∏
            { from: systemActivities[3].id, to: warehouseActivities[0].id, type: 'data', label: 'üì¶ –ó–∞–ø–∏—Ç –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' },
            { from: warehouseActivities[0].id, to: systemActivities[3].id, type: 'data', label: 'üìä –°—Ç–∞—Ç—É—Å –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' },
            { from: systemActivities[9].id, to: warehouseActivities[1].id, type: 'data', label: 'üìã –ó–∞–≤–¥–∞–Ω–Ω—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏' },
            { from: warehouseActivities[2].id, to: shippingActivities[0].id, type: 'data', label: 'üì¶ –ì–æ—Ç–æ–≤–∞ –ø–æ—Å–∏–ª–∫–∞' },
            { from: shippingActivities[1].id, to: systemActivities[6].id, type: 'data', label: 'üìç –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏' },

            // ASSOCIATION FLOWS (–ê—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω—ñ –ø–æ—Ç–æ–∫–∏) - —Ç–æ—á–∫–æ–≤—ñ –ª—ñ–Ω—ñ—ó –¥–æ –¥–∞–Ω–∏—Ö
            { from: systemActivities[7].id, to: systemActivities[8].id, type: 'association', label: 'üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ' },
            { from: paymentActivities[0].id, to: paymentActivities[1].id, type: 'association', label: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' },
            { from: paymentActivities[1].id, to: paymentActivities[2].id, type: 'association', label: 'üí∏ –°–ø–∏—Å–∞–Ω–æ' }
        ];

        flows.forEach(flow => {
            let flowStyle = '';
            let arrowType = 'endArrow=classic;';
            
            switch(flow.type) {
                case 'sequence':
                    flowStyle = `${arrowType}html=1;rounded=0;strokeColor=#000000;strokeWidth=3;fontSize=10;labelBackgroundColor=#ffffff;`;
                    break;
                case 'message':
                    flowStyle = `${arrowType}html=1;rounded=0;strokeColor=#6c8ebf;strokeWidth=2;dashed=1;dashPattern=5 5;fontSize=9;labelBackgroundColor=#ffffff;`;
                    break;
                case 'data':
                    flowStyle = `${arrowType}html=1;rounded=0;strokeColor=#d79b00;strokeWidth=2;dashPattern=2 4;fontSize=9;labelBackgroundColor=#ffffff;`;
                    break;
                case 'association':
                    flowStyle = `${arrowType}html=1;rounded=0;strokeColor=#9673a6;strokeWidth=1;dashPattern=1 3;fontSize=8;labelBackgroundColor=#ffffff;`;
                    break;
            }
            
            content += `        <mxCell id="${this.generateId()}" value="${this.escapeXmlAttribute(flow.label)}" style="${flowStyle}" edge="1" parent="1" source="${flow.from}" target="${flow.to}">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
`;
        });

        // ===== DATA OBJECTS =====
        const dataObjects = [
            { id: this.generateId(), x: 1600, y: 380, text: 'üìÑ\\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è\\n(Order Document)' },
            { id: this.generateId(), x: 1600, y: 480, text: 'üßæ\\n–ß–µ–∫\\n(Receipt)' },
            { id: this.generateId(), x: 1600, y: 580, text: 'üì¶\\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞\\n(Shipping Label)' }
        ];

        dataObjects.forEach(dataObj => {
            content += `        <mxCell id="${dataObj.id}" value="${this.escapeXmlAttribute(dataObj.text)}" style="shape=note;whiteSpace=wrap;html=1;fillColor=#f5f5f5;strokeColor=#666666;fontSize=9;strokeWidth=1;" vertex="1" parent="1">
          <mxGeometry x="${dataObj.x}" y="${dataObj.y}" width="100" height="60" as="geometry"/>
        </mxCell>
`;
        });

        // ===== ANNOTATIONS =====
        const annotations = [
            { id: this.generateId(), x: 120, y: 1180, text: 'üìù –õ–µ–≥–µ–Ω–¥–∞ –ø–æ—Ç–æ–∫—ñ–≤:\\n‚îÅ‚îÅ‚îÅ Sequence Flow (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –¥—ñ—ó)\\n‚îÖ‚îÖ‚îÖ Message Flow (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ–∂ —É—á–∞—Å–Ω–∏–∫–∞–º–∏)\\n‚ï¥‚ï¥‚ï¥ Data Flow (–ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–∏—Ö)\\n¬∑¬∑¬∑ Association Flow (–∑–≤\'—è–∑–æ–∫ –∑ –æ–±\'—î–∫—Ç–∞–º–∏)' },
            { id: this.generateId(), x: 600, y: 1180, text: '‚öôÔ∏è –¢–∏–ø–∏ –∑–∞–≤–¥–∞–Ω—å:\\nüîµ Service Task (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ)\\nüü° User Task (—Ä—É—á–Ω—ñ)\\nüíé Gateway (—Ä—ñ—à–µ–Ω–Ω—è)\\n‚≠ï Event (–ø–æ–¥—ñ—ó)' },
            { id: this.generateId(), x: 1200, y: 1180, text: 'üéØ BPMN 2.0 –°—Ç–∞–Ω–¥–∞—Ä—Ç:\\n‚úÖ Pools & Lanes\\n‚úÖ –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ—Ç–æ–∫—ñ–≤\\n‚úÖ –°–æ–±—ã—Ç–∏—è —Ç–∞ —à–ª—é–∑–∏\\n‚úÖ –û–±\'—î–∫—Ç–∏ –¥–∞–Ω–∏—Ö' }
        ];

        annotations.forEach(annotation => {
            content += `        <mxCell id="${annotation.id}" value="${this.escapeXmlAttribute(annotation.text)}" style="shape=note;whiteSpace=wrap;html=1;fillColor=#ffffcc;strokeColor=#d6b656;fontSize=10;strokeWidth=1;align=left;spacingLeft=10;spacingTop=10;" vertex="1" parent="1">
          <mxGeometry x="${annotation.x}" y="${annotation.y}" width="300" height="120" as="geometry"/>
        </mxCell>
`;
        });

        return content;
    }

    generateBPMNFile() {
        const bpmnContent = this.createDetailedBPMN();
        
        const fullDrawioContent = `<?xml version="1.0" encoding="UTF-8"?>
<mxfile host="Electron" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64)" type="device" etag="Professional-BPMN" version="25.0.8">
  <diagram id="bpmn-page" name="Professional BPMN 2.0 - –¢–µ—Ö–Ω–æ–°–≤—ñ—Ç E-commerce Process">
    <mxGraphModel dx="1422" dy="794" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="2000" pageHeight="1400" math="0" shadow="0">
      <root>
        <mxCell id="0"/>
        <mxCell id="1" parent="0"/>
${bpmnContent}
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>`;

        return fullDrawioContent;
    }
}

// Generate Professional BPMN
const generator = new ProfessionalBPMNGenerator();
const bpmnContent = generator.generateBPMNFile();

try {
    fs.writeFileSync(path.join(__dirname, 'Professional_BPMN_TechnoSvit.drawio'), bpmnContent, 'utf8');
    console.log('üéØ Professional BPMN 2.0 diagram successfully generated!');
    console.log('üìÅ File: Professional_BPMN_TechnoSvit.drawio');
    console.log('üìä Features:');
    console.log('   ‚úÖ 5 Pools with proper lanes');
    console.log('   ‚úÖ All BPMN 2.0 flow types:');
    console.log('      ‚îÅ‚îÅ‚îÅ Sequence Flows (black solid)');
    console.log('      ‚îÖ‚îÖ‚îÖ Message Flows (blue dashed)');
    console.log('      ‚ï¥‚ï¥‚ï¥ Data Flows (yellow dotted)');
    console.log('      ¬∑¬∑¬∑ Association Flows (purple dotted)');
    console.log('   ‚úÖ Professional markings with emojis');
    console.log('   ‚úÖ Complete e-commerce order process');
    console.log('   ‚úÖ Data objects and annotations');
    console.log('   ‚úÖ Wikipedia/OMG BPMN 2.0 compliance');
    console.log(`üìè File size: ${(bpmnContent.length / 1024).toFixed(1)} KB`);
} catch (error) {
    console.error('‚ùå Error generating BPMN diagram:', error.message);
}

export default ProfessionalBPMNGenerator;
